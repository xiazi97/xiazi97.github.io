<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snoopy</title>
  
  <subtitle>点个关注吧，亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiazi97.github.io/"/>
  <updated>2019-05-24T07:13:41.775Z</updated>
  <id>http://xiazi97.github.io/</id>
  
  <author>
    <name>李峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fork的使用</title>
    <link href="http://xiazi97.github.io/2019/05/24/fork%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/24/fork的使用/</id>
    <published>2019-05-24T05:50:28.000Z</published>
    <updated>2019-05-24T07:13:41.775Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在牛客做题时遇到了这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int main(){fork()||fork();}共创建几个进程：&lt;strong&gt;_&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回想之前一直在这里跌倒从来没有爬起来过的经历，痛定
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>彩色的砖块</title>
    <link href="http://xiazi97.github.io/2019/05/23/%E5%BD%A9%E8%89%B2%E7%9A%84%E7%A0%96%E5%9D%97/"/>
    <id>http://xiazi97.github.io/2019/05/23/彩色的砖块/</id>
    <published>2019-05-23T14:14:20.000Z</published>
    <updated>2019-05-23T14:40:01.489Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;小易有一些彩色的砖块。每种颜色由一个大写字母表示。各个颜色砖块看起来都完全一样。现在有一个给定的字符串s,s中每个字符代表小
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>进程状态</title>
    <link href="http://xiazi97.github.io/2019/05/22/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://xiazi97.github.io/2019/05/22/进程状态/</id>
    <published>2019-05-22T02:46:29.000Z</published>
    <updated>2019-05-22T10:23:52.821Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，linux是一个多用户，多任务的系统，可以同时运行多个用户的多个程序，这样就必然会产生很多的进。而对于一个进程而言，它可以有如下几个状态&lt;/p&gt;
&lt;h3 id=&quot;常见进程状态：&quot;&gt;&lt;a href=&quot;#常见进程状态：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>组队竞赛问题</title>
    <link href="http://xiazi97.github.io/2019/05/21/%E7%BB%84%E9%98%9F%E7%AB%9E%E8%B5%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/05/21/组队竞赛问题/</id>
    <published>2019-05-21T12:24:29.000Z</published>
    <updated>2019-05-21T13:29:59.676Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DNS查询和应答报文详解</title>
    <link href="http://xiazi97.github.io/2019/05/20/DNS%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <id>http://xiazi97.github.io/2019/05/20/DNS查询和应答报文详解/</id>
    <published>2019-05-20T11:38:00.000Z</published>
    <updated>2019-05-20T15:48:17.819Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DNS查询和应答报文详解&quot;&gt;&lt;a href=&quot;#DNS查询和应答报文详解&quot; class=&quot;headerlink&quot; title=&quot;DNS查询和应答报文详解&quot;&gt;&lt;/a&gt;DNS查询和应答报文详解&lt;/h3&gt;&lt;p&gt;DNS是一套分布式的域名服务系统。每个DNS服务器上都存放着
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>vector与list的区别</title>
    <link href="http://xiazi97.github.io/2019/05/19/vector%E4%B8%8Elist%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiazi97.github.io/2019/05/19/vector与list的区别/</id>
    <published>2019-05-19T14:53:55.000Z</published>
    <updated>2019-05-19T15:03:22.509Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h3&gt;&lt;h4 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之list类</title>
    <link href="http://xiazi97.github.io/2019/05/16/STL%E4%B9%8Blist%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/16/STL之list类/</id>
    <published>2019-05-16T12:36:15.000Z</published>
    <updated>2019-05-16T15:23:12.636Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list的介绍和使用&quot;&gt;&lt;a href=&quot;#list的介绍和使用&quot; class=&quot;headerlink&quot; title=&quot;list的介绍和使用&quot;&gt;&lt;/a&gt;list的介绍和使用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;list是可以在常数范围内在任意位置进行插入和删除的序列式容器，
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单实现string类以及深浅拷贝问题</title>
    <link href="http://xiazi97.github.io/2019/05/15/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0string%E7%B1%BB%E4%BB%A5%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/05/15/简单实现string类以及深浅拷贝问题/</id>
    <published>2019-05-15T13:32:40.000Z</published>
    <updated>2019-05-15T14:09:21.686Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象之间可以进行复制操作，包括采用拷贝构造函数的方式用一个对象去构造另一个对象（用一个对象的值初始化一个新的构造的对象），如同指针的复制一样，对象复制也分为浅复制和深复制&lt;/p&gt;
&lt;h3 id=&quot;对象浅拷贝：&quot;&gt;&lt;a href=&quot;#对象浅拷贝：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之vector类</title>
    <link href="http://xiazi97.github.io/2019/05/14/STL%E4%B9%8Bvector%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/14/STL之vector类/</id>
    <published>2019-05-14T01:27:04.000Z</published>
    <updated>2019-05-14T04:44:28.196Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vector的介绍&quot;&gt;&lt;a href=&quot;#vector的介绍&quot; class=&quot;headerlink&quot; title=&quot;vector的介绍&quot;&gt;&lt;/a&gt;vector的介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;vector是表示可变大小数组的序列容器&lt;/li&gt;
&lt;li&gt;就像数组一样
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之string类</title>
    <link href="http://xiazi97.github.io/2019/05/12/STL%E4%B9%8Bstring%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/12/STL之string类/</id>
    <published>2019-05-12T10:48:58.000Z</published>
    <updated>2019-05-13T14:40:59.284Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要用string类&quot;&gt;&lt;a href=&quot;#为什么要用string类&quot; class=&quot;headerlink&quot; title=&quot;为什么要用string类&quot;&gt;&lt;/a&gt;为什么要用string类&lt;/h3&gt;&lt;p&gt;在C语言中，字符串是以’\0’结尾的一些字符的集合，为了操作
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://xiazi97.github.io/2019/05/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xiazi97.github.io/2019/05/10/单例模式/</id>
    <published>2019-05-10T05:56:28.000Z</published>
    <updated>2019-05-11T10:13:19.619Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式就是保证&lt;strong&gt;一个类只有一个实例&lt;/strong&gt;，并提供一个访问它的全局访问点。首先，需要保证一个类只有一个实例；在类中，要构造一个实例，就必须调用类的构造函数，如此，为了防止在外部调用类的构造函数而构造实例，需要将构造函数的访问权限标记为protect
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>类和对象经典面试题（一）</title>
    <link href="http://xiazi97.github.io/2019/05/10/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xiazi97.github.io/2019/05/10/类和对象经典面试题（一）/</id>
    <published>2019-05-10T02:27:47.000Z</published>
    <updated>2019-05-10T04:35:52.664Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定位new表达式&quot;&gt;&lt;a href=&quot;#定位new表达式&quot; class=&quot;headerlink&quot; title=&quot;定位new表达式&quot;&gt;&lt;/a&gt;定位new表达式&lt;/h3&gt;&lt;p&gt;在&lt;strong&gt;已分配的原始内存空间&lt;/strong&gt;中&lt;strong&gt;调用构造函数&lt;/s
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>结构体对齐规则</title>
    <link href="http://xiazi97.github.io/2019/05/09/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99/"/>
    <id>http://xiazi97.github.io/2019/05/09/结构体对齐规则/</id>
    <published>2019-05-09T11:58:25.000Z</published>
    <updated>2019-05-09T14:16:23.497Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要进行内存对齐&quot;&gt;&lt;a href=&quot;#为什么要进行内存对齐&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行内存对齐&quot;&gt;&lt;/a&gt;为什么要进行内存对齐&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Makefile基本使用</title>
    <link href="http://xiazi97.github.io/2019/05/08/Makefile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/08/Makefile基本使用/</id>
    <published>2019-05-08T10:44:56.000Z</published>
    <updated>2019-05-08T12:39:09.312Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要使用Makefile&quot;&gt;&lt;a href=&quot;#为什么要使用Makefile&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Makefile&quot;&gt;&lt;/a&gt;为什么要使用Makefile&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会不会使用Makefile从一个
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译过程</title>
    <link href="http://xiazi97.github.io/2019/05/07/gcc%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://xiazi97.github.io/2019/05/07/gcc编译过程/</id>
    <published>2019-05-07T02:00:08.000Z</published>
    <updated>2019-05-07T04:54:12.403Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序的编译过程&quot;&gt;&lt;a href=&quot;#程序的编译过程&quot; class=&quot;headerlink&quot; title=&quot;程序的编译过程&quot;&gt;&lt;/a&gt;程序的编译过程&lt;/h3&gt;&lt;h4 id=&quot;预处理（宏替换）&quot;&gt;&lt;a href=&quot;#预处理（宏替换）&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++中的引用和指针</title>
    <link href="http://xiazi97.github.io/2019/05/06/C-%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://xiazi97.github.io/2019/05/06/C-中的引用和指针/</id>
    <published>2019-05-06T12:17:08.000Z</published>
    <updated>2019-05-06T13:30:49.485Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引用的定义：&quot;&gt;&lt;a href=&quot;#引用的定义：&quot; class=&quot;headerlink&quot; title=&quot;引用的定义：&quot;&gt;&lt;/a&gt;引用的定义：&lt;/h3&gt;&lt;p&gt;C++是C语言的继承，它可以进行过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中四种cast转换</title>
    <link href="http://xiazi97.github.io/2019/05/05/C-%E4%B8%AD%E5%9B%9B%E7%A7%8Dcast%E8%BD%AC%E6%8D%A2/"/>
    <id>http://xiazi97.github.io/2019/05/05/C-中四种cast转换/</id>
    <published>2019-05-05T15:14:23.000Z</published>
    <updated>2019-05-05T15:15:35.241Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast&lt;/p&gt;
&lt;h3 id=&quot;const-cast&quot;&gt;&lt;a href=&quot;#const-cast&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>static关键字的作用</title>
    <link href="http://xiazi97.github.io/2019/05/04/static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/04/static关键字的作用/</id>
    <published>2019-05-04T15:00:23.000Z</published>
    <updated>2019-05-04T15:02:03.120Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;全局静态变量&quot;&gt;&lt;a href=&quot;#全局静态变量&quot; class=&quot;headerlink&quot; title=&quot;全局静态变量&quot;&gt;&lt;/a&gt;全局静态变量&lt;/h4&gt;&lt;p&gt;在全局变量前加上关键字static，全局变量就定义成一个全局静态变量.&lt;/p&gt;
&lt;p&gt;静态存储区，在整个程序
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>函数重载，重定义，重写</title>
    <link href="http://xiazi97.github.io/2019/05/03/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E9%87%8D%E5%AE%9A%E4%B9%89%EF%BC%8C%E9%87%8D%E5%86%99/"/>
    <id>http://xiazi97.github.io/2019/05/03/函数重载，重定义，重写/</id>
    <published>2019-05-03T06:59:48.000Z</published>
    <updated>2019-05-03T07:16:27.381Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数重载&quot;&gt;&lt;a href=&quot;#函数重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载&quot;&gt;&lt;/a&gt;函数重载&lt;/h3&gt;&lt;p&gt;在一个类中声明多个名称相同但是参数列表不同的函数，这些的参数可能个数或顺序，类型不同，但是不能靠返回类型来判断，也就是说，在
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://xiazi97.github.io/2019/04/28/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/28/红黑树/</id>
    <published>2019-04-28T00:49:44.000Z</published>
    <updated>2019-05-02T14:21:12.338Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红黑树，是一种二叉搜索树，但在每个结点增加一个存储位表示结点的颜色，可以是Red和Black，通过对任何一条从根到叶子结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出两倍，因而是接近平衡的。&lt;/p&gt;
&lt;h3 id=&quot;红黑树的性质&quot;&gt;&lt;a href=&quot;#红黑树的性质
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
</feed>
