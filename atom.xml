<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snoopy</title>
  
  <subtitle>点个关注吧，亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiazi97.github.io/"/>
  <updated>2019-05-05T15:15:35.241Z</updated>
  <id>http://xiazi97.github.io/</id>
  
  <author>
    <name>李峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++中四种cast转换</title>
    <link href="http://xiazi97.github.io/2019/05/05/C-%E4%B8%AD%E5%9B%9B%E7%A7%8Dcast%E8%BD%AC%E6%8D%A2/"/>
    <id>http://xiazi97.github.io/2019/05/05/C-中四种cast转换/</id>
    <published>2019-05-05T15:14:23.000Z</published>
    <updated>2019-05-05T15:15:35.241Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast&lt;/p&gt;
&lt;h3 id=&quot;const-cast&quot;&gt;&lt;a href=&quot;#const-cast&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>static关键字的作用</title>
    <link href="http://xiazi97.github.io/2019/05/04/static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/04/static关键字的作用/</id>
    <published>2019-05-04T15:00:23.000Z</published>
    <updated>2019-05-04T15:02:03.120Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;全局静态变量&quot;&gt;&lt;a href=&quot;#全局静态变量&quot; class=&quot;headerlink&quot; title=&quot;全局静态变量&quot;&gt;&lt;/a&gt;全局静态变量&lt;/h4&gt;&lt;p&gt;在全局变量前加上关键字static，全局变量就定义成一个全局静态变量.&lt;/p&gt;
&lt;p&gt;静态存储区，在整个程序
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>函数重载，重定义，重写</title>
    <link href="http://xiazi97.github.io/2019/05/03/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E9%87%8D%E5%AE%9A%E4%B9%89%EF%BC%8C%E9%87%8D%E5%86%99/"/>
    <id>http://xiazi97.github.io/2019/05/03/函数重载，重定义，重写/</id>
    <published>2019-05-03T06:59:48.000Z</published>
    <updated>2019-05-03T07:16:27.381Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数重载&quot;&gt;&lt;a href=&quot;#函数重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载&quot;&gt;&lt;/a&gt;函数重载&lt;/h3&gt;&lt;p&gt;在一个类中声明多个名称相同但是参数列表不同的函数，这些的参数可能个数或顺序，类型不同，但是不能靠返回类型来判断，也就是说，在
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://xiazi97.github.io/2019/04/28/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/28/红黑树/</id>
    <published>2019-04-28T00:49:44.000Z</published>
    <updated>2019-05-02T14:21:12.338Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红黑树，是一种二叉搜索树，但在每个结点增加一个存储位表示结点的颜色，可以是Red和Black，通过对任何一条从根到叶子结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出两倍，因而是接近平衡的。&lt;/p&gt;
&lt;h3 id=&quot;红黑树的性质&quot;&gt;&lt;a href=&quot;#红黑树的性质
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AVL树</title>
    <link href="http://xiazi97.github.io/2019/04/23/AVL%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/23/AVL树/</id>
    <published>2019-04-23T12:09:33.000Z</published>
    <updated>2019-04-24T15:17:22.283Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇所写的二叉搜索树虽可以缩短查找的效率，但如果数据有序或接近有序二叉搜索树将退化为单支树，查找元素相当于在顺序表中搜索元素，效率低下。因此，两位俄罗斯的数学家G.M.Adelson-Velskii和E.M.Landis在1962年发明了一种解决上述问题的方法：当向二叉搜
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://xiazi97.github.io/2019/04/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/20/二叉搜索树/</id>
    <published>2019-04-20T12:57:43.000Z</published>
    <updated>2019-04-21T15:50:31.519Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;顾名思义，二叉搜索树是以一棵二叉树来组织的，这样的一棵树可以用一个链表结构来表示，每个节点除了data还有left、right、parent，分别指向节点的左孩子，右孩子和父节点。如果对应的节点不存在则指向NIL节点。（因为最简单的二叉搜索树中的NIL节点里并没有有用信息，
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>高级IO</title>
    <link href="http://xiazi97.github.io/2019/04/15/%E9%AB%98%E7%BA%A7IO/"/>
    <id>http://xiazi97.github.io/2019/04/15/高级IO/</id>
    <published>2019-04-15T15:36:10.000Z</published>
    <updated>2019-04-18T15:17:40.898Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进入IO之前，我们需要先明白一个概念，IO实际上是分两步的——1.等待，2.数据拷贝&lt;/p&gt;
&lt;p&gt;正式进入IO时，先来通过一个例子简单理解一下五种IO模型：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="linux" scheme="http://xiazi97.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="http://xiazi97.github.io/2019/03/25/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://xiazi97.github.io/2019/03/25/智能指针/</id>
    <published>2019-03-25T10:18:54.000Z</published>
    <updated>2019-04-11T15:28:48.711Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    C++程序设计中，使用堆内存是很繁琐的操作——堆内存的申请和释放都需要程序员自己去管理。虽然说程序员自己管理内存可以提高程序的效率，但是整体来说程序员手动管理内存是比较麻烦的，而且容易出现内存泄漏，异常安全（如果在malloc和free之间如果存在抛异常，那么还是
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DNS，ICMP协议及NAT技术</title>
    <link href="http://xiazi97.github.io/2019/03/07/DNS%EF%BC%8CICMP%E5%8D%8F%E8%AE%AE%E5%8F%8ANAT%E6%8A%80%E6%9C%AF/"/>
    <id>http://xiazi97.github.io/2019/03/07/DNS，ICMP协议及NAT技术/</id>
    <published>2019-03-07T02:59:30.000Z</published>
    <updated>2019-04-22T17:27:25.779Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DNS-Domain-Name-System&quot;&gt;&lt;a href=&quot;#DNS-Domain-Name-System&quot; class=&quot;headerlink&quot; title=&quot;DNS(Domain Name System)&quot;&gt;&lt;/a&gt;DNS(Domain Name Sys
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之GET请求与POST请求的区别</title>
    <link href="http://xiazi97.github.io/2019/03/06/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BGET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiazi97.github.io/2019/03/06/HTTP协议之GET请求与POST请求的区别/</id>
    <published>2019-03-06T12:02:13.000Z</published>
    <updated>2019-03-06T13:38:13.709Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GET和POST是HTTP请求的两种基本方式，对于这两种请求方式的区别，只要是接触过Web开发的就能说出一二：GET把参数包含在URL中，POST通过正文传参！&lt;/p&gt;
&lt;p&gt;而我想深入了解以下的时候，就去了w3cschool，这是w3cschool给出的标准答案：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://xiazi97.github.io/2019/03/06/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xiazi97.github.io/2019/03/06/HTTP协议/</id>
    <published>2019-03-06T08:17:34.000Z</published>
    <updated>2019-03-07T10:12:18.375Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP简介&quot;&gt;&lt;a href=&quot;#HTTP简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP简介&quot;&gt;&lt;/a&gt;HTTP简介&lt;/h2&gt;&lt;p&gt;HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从网络
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ARP协议</title>
    <link href="http://xiazi97.github.io/2019/03/05/ARP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xiazi97.github.io/2019/03/05/ARP协议/</id>
    <published>2019-03-05T15:13:33.000Z</published>
    <updated>2019-03-05T15:39:16.764Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ARP协议&quot;&gt;&lt;a href=&quot;#ARP协议&quot; class=&quot;headerlink&quot; title=&quot;ARP协议&quot;&gt;&lt;/a&gt;ARP协议&lt;/h2&gt;&lt;p&gt;虽然我们把ARP协议单独列出来了，但是在介绍ARP协议之前我们需要强调一点——ARP不是一个单纯的数据链路层的协议，
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>项目之文本相似度比较</title>
    <link href="http://xiazi97.github.io/2019/03/03/%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6%E6%AF%94%E8%BE%83/"/>
    <id>http://xiazi97.github.io/2019/03/03/项目之文本相似度比较/</id>
    <published>2019-03-03T02:05:55.000Z</published>
    <updated>2019-03-03T07:44:59.178Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    对于当代大学生而言，毕业时写的论文是一个对自己知识的&lt;/p&gt;
&lt;p&gt;1.基于jieba库对文件进行分词&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>以太网</title>
    <link href="http://xiazi97.github.io/2019/02/17/%E4%BB%A5%E5%A4%AA%E7%BD%91/"/>
    <id>http://xiazi97.github.io/2019/02/17/以太网/</id>
    <published>2019-02-17T06:55:14.000Z</published>
    <updated>2019-03-05T15:14:06.805Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;点到点信道的数据链路层协议的数据单元为帧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将网络层交下来的IP数据报添加首部尾部封装成帧；&lt;/li&gt;
&lt;li&gt;将封装好的帧发送给接受方的数据链路层；&lt;/li&gt;
&lt;li&gt;收到的帧无差错则从中提取到IP数据报交给网络层，否则丢弃&lt;/li&gt;
&lt;/ol&gt;
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>IP协议</title>
    <link href="http://xiazi97.github.io/2019/01/28/IP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xiazi97.github.io/2019/01/28/IP协议/</id>
    <published>2019-01-28T08:03:24.000Z</published>
    <updated>2019-03-17T15:03:54.865Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IP协议提供了一种从A主机跨网络将数据传给B主机的能力&lt;/li&gt;
&lt;li&gt;主机：配有IP地址，但是不进行路由控制
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>TCP协议</title>
    <link href="http://xiazi97.github.io/2019/01/07/TCP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xiazi97.github.io/2019/01/07/TCP协议/</id>
    <published>2019-01-07T14:17:56.000Z</published>
    <updated>2019-03-13T01:29:49.147Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于常见的网络协议来说，TCP是最为人知晓的，即便是一些业外人士只要对电脑网络有一定的了解也能说上几句，那么广为人知的TCP协议到底是什么呢，下边作为一个初学者的视角来浅谈一下&lt;/p&gt;
&lt;p&gt;TCP（Transmission Control Protocol &lt;a href
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统之进程</title>
    <link href="http://xiazi97.github.io/2019/01/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E8%BF%9B%E7%A8%8B/"/>
    <id>http://xiazi97.github.io/2019/01/03/操作系统之进程/</id>
    <published>2019-01-03T15:20:18.000Z</published>
    <updated>2019-01-06T12:38:00.101Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一章我们主要介绍进程的状态，了解进程的状态有助于我们分析进程在系统中的各种作用等。进程的调度算法，进程的调度算法可以让我们看到内核是如何设计出一套注重效率并且兼顾公平的算法，内核如何为不同的进程分配资源等，帮助我们加深对于进程相关知识的了解。   &lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>网络基础（一）</title>
    <link href="http://xiazi97.github.io/2018/11/30/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xiazi97.github.io/2018/11/30/网络基础（一）/</id>
    <published>2018-11-30T14:45:41.000Z</published>
    <updated>2018-12-06T15:08:24.183Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据传输（-不-同主机上的进程间同信）&quot;&gt;&lt;a href=&quot;#数据传输（-不-同主机上的进程间同信）&quot; class=&quot;headerlink&quot; title=&quot;数据传输（ (不)同主机上的进程间同信）&quot;&gt;&lt;/a&gt;数据传输（ (不)同主机上的进程间同信）&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="http://xiazi97.github.io/2018/11/26/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://xiazi97.github.io/2018/11/26/深浅拷贝/</id>
    <published>2018-11-26T15:59:25.000Z</published>
    <updated>2018-12-02T14:32:14.202Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象之间可以进行复制操作，包括采用拷贝构造函数的方式用一个对象去构造另一个对象（用一个对象的值初始化一个新的构造的对象），如同指针的复制一样，对象复制也分为浅复制和深复制&lt;/p&gt;
&lt;p&gt;对象浅拷贝：&lt;/p&gt;
&lt;p&gt;两个对象之间进行复制时，若复制完成后，他们还共同使用着某些资
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://xiazi97.github.io/2018/11/19/%E6%A8%A1%E6%9D%BF/"/>
    <id>http://xiazi97.github.io/2018/11/19/模板/</id>
    <published>2018-11-19T15:09:03.000Z</published>
    <updated>2018-11-29T09:13:36.244Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何实现一个通用的函数呢？（如针对不同的参数类型均可）&lt;/p&gt;
&lt;p&gt;使用函数重载可以实现，但是使得代码复用率和可维护性比较低&lt;/p&gt;
&lt;p&gt;泛型编程：&lt;/p&gt;
&lt;p&gt;编写与类型无关，与使用场景无关的通用代码，使得代码可以复用&lt;/p&gt;
&lt;p&gt;模板：&lt;/p&gt;
&lt;p&gt;函数模板：
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
</feed>
