<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snoopy</title>
  
  <subtitle>点个关注吧，亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiazi97.github.io/"/>
  <updated>2019-08-21T15:30:30.124Z</updated>
  <id>http://xiazi97.github.io/</id>
  
  <author>
    <name>李峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题</title>
    <link href="http://xiazi97.github.io/2019/08/18/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/08/18/面试题/</id>
    <published>2019-08-17T23:53:57.000Z</published>
    <updated>2019-08-21T15:30:30.124Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、C-的三大特性&quot;&gt;&lt;a href=&quot;#一、C-的三大特性&quot; class=&quot;headerlink&quot; title=&quot;一、C++的三大特性&quot;&gt;&lt;/a&gt;一、C++的三大特性&lt;/h3&gt;&lt;p&gt;封装，继承，多态。&lt;/p&gt;
&lt;h4 id=&quot;请介绍一下什么是封装？&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL中list类的模拟实现</title>
    <link href="http://xiazi97.github.io/2019/08/17/STL%E4%B8%ADlist%E7%B1%BB%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://xiazi97.github.io/2019/08/17/STL中list类的模拟实现/</id>
    <published>2019-08-17T05:57:11.000Z</published>
    <updated>2019-08-17T06:18:20.347Z</updated>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++的类型转换</title>
    <link href="http://xiazi97.github.io/2019/08/09/C-%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://xiazi97.github.io/2019/08/09/C-的类型转换/</id>
    <published>2019-08-09T03:34:31.000Z</published>
    <updated>2019-08-09T06:22:08.677Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在C语言中，类型转换是这样子的&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="http://xiazi97.github.io/2019/07/27/%E5%BC%82%E5%B8%B8/"/>
    <id>http://xiazi97.github.io/2019/07/27/异常/</id>
    <published>2019-07-26T23:57:09.000Z</published>
    <updated>2019-07-27T05:30:48.709Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在C语言中，传统的错误处理机制是这样子的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;终止程序，如**&lt;/strong&gt;assert**，缺陷：用户难以接受。如发生内存错误，除0错误时就会终止程序；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;返回错误码&lt;/st
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>变量类型推导</title>
    <link href="http://xiazi97.github.io/2019/07/06/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/"/>
    <id>http://xiazi97.github.io/2019/07/06/变量类型推导/</id>
    <published>2019-07-06T09:47:20.000Z</published>
    <updated>2019-07-06T15:14:30.203Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么需要类型推导&quot;&gt;&lt;a href=&quot;#为什么需要类型推导&quot; class=&quot;headerlink&quot; title=&quot;为什么需要类型推导&quot;&gt;&lt;/a&gt;为什么需要类型推导&lt;/h3&gt;&lt;p&gt;在我们编程的时候会发现：在定义变量时必须先给出变量的实际类型编译器才会允许定义，但是
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title> lambda表达式</title>
    <link href="http://xiazi97.github.io/2019/07/05/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://xiazi97.github.io/2019/07/05/lambda表达式/</id>
    <published>2019-07-05T14:55:58.000Z</published>
    <updated>2019-07-05T15:15:40.502Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在C++98中，如果想要对一个数据集合中的元素进行排序，可以使用std::sort方法。 &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IO多路转接之epoll</title>
    <link href="http://xiazi97.github.io/2019/06/30/IO%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bepoll/"/>
    <id>http://xiazi97.github.io/2019/06/30/IO多路转接之epoll/</id>
    <published>2019-06-30T08:51:12.000Z</published>
    <updated>2019-06-30T15:19:26.481Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相对于select来说，epoll没有描述符个数限制，使用一个文件描述符管理多个描述符，将用户关心的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。&lt;/p&gt;
&lt;h3 id=&quot;epoll的相关系统调用：&quot;&gt;&lt;a href=&quot;#epoll的
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>I/O多路转接之select</title>
    <link href="http://xiazi97.github.io/2019/06/17/I-O%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5%E4%B9%8Bselect/"/>
    <id>http://xiazi97.github.io/2019/06/17/I-O多路转接之select/</id>
    <published>2019-06-17T09:38:02.000Z</published>
    <updated>2019-06-17T13:50:14.580Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;select系统调用是用来让我们的程序监视多个文件句柄的状态变化的。程序会停在select这里等待，直到被监视的文件句柄有一个或多个发生了状态改变。关于文件句柄，其实就是一个整数，我们最熟悉的句柄是0、1、2三个，0是标准输入，1是标准输出，2是标准错误输出。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://xiazi97.github.io/2019/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://xiazi97.github.io/2019/06/13/排序算法/</id>
    <published>2019-06-13T13:49:56.000Z</published>
    <updated>2019-06-13T14:08:49.196Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;对于一个带排序数组来说，其初始有序数组元素个数为1，然后从第二个元素，插入到有序数组中。对于每一次插入操作，从后往前遍历当前
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Top K问题</title>
    <link href="http://xiazi97.github.io/2019/06/12/Top-K%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/06/12/Top-K问题/</id>
    <published>2019-06-12T14:09:48.000Z</published>
    <updated>2019-06-12T14:17:08.656Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、直接全部排序（只适用于内存够的情况）&lt;/p&gt;
&lt;p&gt;当数据量较小的情况下，内存中可以容纳所有数据。则最简单也是最容易想到的方法是将数据全部排序，然后取排序后的数据中的前K个。&lt;/p&gt;
&lt;p&gt;这种方法对数据量比较敏感，&lt;strong&gt;当数据量较大的情况下，内存不能完全容纳
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="http://xiazi97.github.io/2019/06/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://xiazi97.github.io/2019/06/11/迭代器/</id>
    <published>2019-06-11T12:55:13.000Z</published>
    <updated>2019-06-11T15:07:51.644Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h3&gt;&lt;p&gt;Iterator（迭代器）模式又称Cursor（游标）模式，用于提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>非阻塞IO</title>
    <link href="http://xiazi97.github.io/2019/06/10/%E9%9D%9E%E9%98%BB%E5%A1%9EIO/"/>
    <id>http://xiazi97.github.io/2019/06/10/非阻塞IO/</id>
    <published>2019-06-10T06:29:30.000Z</published>
    <updated>2019-06-10T12:35:52.350Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我们知道，socket() 调用创建指定系列和指定类型的套接字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = socket(family, type, protocol);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket将返回套接字句柄。套接字句柄即为文件描述符s，而&lt;str
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>类中成员内存分布</title>
    <link href="http://xiazi97.github.io/2019/06/06/%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/"/>
    <id>http://xiazi97.github.io/2019/06/06/类中成员内存分布/</id>
    <published>2019-06-06T13:59:46.000Z</published>
    <updated>2019-06-06T14:05:24.149Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;static修饰符&quot;&gt;&lt;a href=&quot;#static修饰符&quot; class=&quot;headerlink&quot; title=&quot;static修饰符&quot;&gt;&lt;/a&gt;static修饰符&lt;/h3&gt;&lt;h4 id=&quot;static修饰成员变量&quot;&gt;&lt;a href=&quot;#static修饰成员变量&quot;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>程序内存管理</title>
    <link href="http://xiazi97.github.io/2019/06/05/%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://xiazi97.github.io/2019/06/05/程序内存管理/</id>
    <published>2019-06-05T14:08:04.000Z</published>
    <updated>2019-06-05T14:37:28.793Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序内存管理：&quot;&gt;&lt;a href=&quot;#程序内存管理：&quot; class=&quot;headerlink&quot; title=&quot;程序内存管理：&quot;&gt;&lt;/a&gt;程序内存管理：&lt;/h3&gt;&lt;p&gt;一个程序本质上都是由&lt;strong&gt;BSS段、data段、text段&lt;/strong&gt;三个组成的。可
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信</title>
    <link href="http://xiazi97.github.io/2019/06/04/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://xiazi97.github.io/2019/06/04/进程间通信/</id>
    <published>2019-06-04T14:39:38.000Z</published>
    <updated>2019-06-04T14:43:55.227Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进程间通信主要包括管道、系统IPC（包括消息队列、信号量、信号、共享内存等）、以及套接字socket。&lt;/p&gt;
&lt;h3 id=&quot;管道：&quot;&gt;&lt;a href=&quot;#管道：&quot; class=&quot;headerlink&quot; title=&quot;管道：&quot;&gt;&lt;/a&gt;管道：&lt;/h3&gt;&lt;p&gt;管道主要包括无
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>多态</title>
    <link href="http://xiazi97.github.io/2019/06/03/%E5%A4%9A%E6%80%81/"/>
    <id>http://xiazi97.github.io/2019/06/03/多态/</id>
    <published>2019-06-03T05:39:31.000Z</published>
    <updated>2019-06-03T15:18:04.234Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;多态的概念&quot;&gt;&lt;a href=&quot;#多态的概念&quot; class=&quot;headerlink&quot; title=&quot;多态的概念&quot;&gt;&lt;/a&gt;多态的概念&lt;/h3&gt;&lt;p&gt;通俗来说，就是多种形态，具体而言就是为了完成某一个行为，当不同的对象去完成时会产生不同的状态。&lt;/p&gt;
&lt;p&gt;举个栗
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="http://xiazi97.github.io/2019/06/02/%E7%BB%A7%E6%89%BF/"/>
    <id>http://xiazi97.github.io/2019/06/02/继承/</id>
    <published>2019-06-02T13:31:56.000Z</published>
    <updated>2019-06-02T14:10:26.151Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;继承的概念：&quot;&gt;&lt;a href=&quot;#继承的概念：&quot; class=&quot;headerlink&quot; title=&quot;继承的概念：&quot;&gt;&lt;/a&gt;继承的概念：&lt;/h3&gt;&lt;p&gt;继承(inheritance)机制是面向对象程序设计使代码可以复用的最重要的手段，它允许程序员在保持原有类特
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>覆盖与隐藏</title>
    <link href="http://xiazi97.github.io/2019/06/01/%E8%A6%86%E7%9B%96%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
    <id>http://xiazi97.github.io/2019/06/01/覆盖与隐藏/</id>
    <published>2019-06-01T14:24:03.000Z</published>
    <updated>2019-06-01T14:41:40.317Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/f29ec89
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>fork与vfork的区别</title>
    <link href="http://xiazi97.github.io/2019/05/31/fork%E4%B8%8Evfork%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiazi97.github.io/2019/05/31/fork与vfork的区别/</id>
    <published>2019-05-31T15:48:25.000Z</published>
    <updated>2019-05-31T15:49:45.214Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fork的基础知识：&quot;&gt;&lt;a href=&quot;#fork的基础知识：&quot; class=&quot;headerlink&quot; title=&quot;fork的基础知识：&quot;&gt;&lt;/a&gt;fork的基础知识：&lt;/h3&gt;&lt;p&gt;fork:创建一个和当前进程映像一样的进程可以通过fork( )系统调用：&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xiazi97.github.io/2019/05/30/C-11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://xiazi97.github.io/2019/05/30/C-11新特性/</id>
    <published>2019-05-30T14:17:52.522Z</published>
    <updated>2019-05-30T14:31:28.277Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可变参数模板：&quot;&gt;&lt;a href=&quot;#可变参数模板：&quot; class=&quot;headerlink&quot; title=&quot;可变参数模板：&quot;&gt;&lt;/a&gt;可变参数模板：&lt;/h3&gt;&lt;p&gt;C++11的可变参数模板，对参数进行了高度泛化，可以表示任意数目、任意类型的参数，其语法为：在cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
