<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snoopy</title>
  
  <subtitle>点个关注吧，亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiazi97.github.io/"/>
  <updated>2019-05-19T15:03:22.509Z</updated>
  <id>http://xiazi97.github.io/</id>
  
  <author>
    <name>李峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vector与list的区别</title>
    <link href="http://xiazi97.github.io/2019/05/19/vector%E4%B8%8Elist%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiazi97.github.io/2019/05/19/vector与list的区别/</id>
    <published>2019-05-19T14:53:55.000Z</published>
    <updated>2019-05-19T15:03:22.509Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h3&gt;&lt;h4 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之list类</title>
    <link href="http://xiazi97.github.io/2019/05/16/STL%E4%B9%8Blist%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/16/STL之list类/</id>
    <published>2019-05-16T12:36:15.000Z</published>
    <updated>2019-05-16T15:23:12.636Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list的介绍和使用&quot;&gt;&lt;a href=&quot;#list的介绍和使用&quot; class=&quot;headerlink&quot; title=&quot;list的介绍和使用&quot;&gt;&lt;/a&gt;list的介绍和使用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;list是可以在常数范围内在任意位置进行插入和删除的序列式容器，
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单实现string类以及深浅拷贝问题</title>
    <link href="http://xiazi97.github.io/2019/05/15/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0string%E7%B1%BB%E4%BB%A5%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/05/15/简单实现string类以及深浅拷贝问题/</id>
    <published>2019-05-15T13:32:40.000Z</published>
    <updated>2019-05-15T14:09:21.686Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象之间可以进行复制操作，包括采用拷贝构造函数的方式用一个对象去构造另一个对象（用一个对象的值初始化一个新的构造的对象），如同指针的复制一样，对象复制也分为浅复制和深复制&lt;/p&gt;
&lt;h3 id=&quot;对象浅拷贝：&quot;&gt;&lt;a href=&quot;#对象浅拷贝：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之vector类</title>
    <link href="http://xiazi97.github.io/2019/05/14/STL%E4%B9%8Bvector%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/14/STL之vector类/</id>
    <published>2019-05-14T01:27:04.000Z</published>
    <updated>2019-05-14T04:44:28.196Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vector的介绍&quot;&gt;&lt;a href=&quot;#vector的介绍&quot; class=&quot;headerlink&quot; title=&quot;vector的介绍&quot;&gt;&lt;/a&gt;vector的介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;vector是表示可变大小数组的序列容器&lt;/li&gt;
&lt;li&gt;就像数组一样
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL之string类</title>
    <link href="http://xiazi97.github.io/2019/05/12/STL%E4%B9%8Bstring%E7%B1%BB/"/>
    <id>http://xiazi97.github.io/2019/05/12/STL之string类/</id>
    <published>2019-05-12T10:48:58.000Z</published>
    <updated>2019-05-13T14:40:59.284Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要用string类&quot;&gt;&lt;a href=&quot;#为什么要用string类&quot; class=&quot;headerlink&quot; title=&quot;为什么要用string类&quot;&gt;&lt;/a&gt;为什么要用string类&lt;/h3&gt;&lt;p&gt;在C语言中，字符串是以’\0’结尾的一些字符的集合，为了操作
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://xiazi97.github.io/2019/05/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xiazi97.github.io/2019/05/10/单例模式/</id>
    <published>2019-05-10T05:56:28.000Z</published>
    <updated>2019-05-11T10:13:19.619Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式就是保证&lt;strong&gt;一个类只有一个实例&lt;/strong&gt;，并提供一个访问它的全局访问点。首先，需要保证一个类只有一个实例；在类中，要构造一个实例，就必须调用类的构造函数，如此，为了防止在外部调用类的构造函数而构造实例，需要将构造函数的访问权限标记为protect
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>类和对象经典面试题（一）</title>
    <link href="http://xiazi97.github.io/2019/05/10/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xiazi97.github.io/2019/05/10/类和对象经典面试题（一）/</id>
    <published>2019-05-10T02:27:47.000Z</published>
    <updated>2019-05-10T04:35:52.664Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定位new表达式&quot;&gt;&lt;a href=&quot;#定位new表达式&quot; class=&quot;headerlink&quot; title=&quot;定位new表达式&quot;&gt;&lt;/a&gt;定位new表达式&lt;/h3&gt;&lt;p&gt;在&lt;strong&gt;已分配的原始内存空间&lt;/strong&gt;中&lt;strong&gt;调用构造函数&lt;/s
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>结构体对齐规则</title>
    <link href="http://xiazi97.github.io/2019/05/09/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99/"/>
    <id>http://xiazi97.github.io/2019/05/09/结构体对齐规则/</id>
    <published>2019-05-09T11:58:25.000Z</published>
    <updated>2019-05-09T14:16:23.497Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要进行内存对齐&quot;&gt;&lt;a href=&quot;#为什么要进行内存对齐&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行内存对齐&quot;&gt;&lt;/a&gt;为什么要进行内存对齐&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Makefile基本使用</title>
    <link href="http://xiazi97.github.io/2019/05/08/Makefile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/08/Makefile基本使用/</id>
    <published>2019-05-08T10:44:56.000Z</published>
    <updated>2019-05-08T12:39:09.312Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要使用Makefile&quot;&gt;&lt;a href=&quot;#为什么要使用Makefile&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Makefile&quot;&gt;&lt;/a&gt;为什么要使用Makefile&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会不会使用Makefile从一个
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译过程</title>
    <link href="http://xiazi97.github.io/2019/05/07/gcc%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://xiazi97.github.io/2019/05/07/gcc编译过程/</id>
    <published>2019-05-07T02:00:08.000Z</published>
    <updated>2019-05-07T04:54:12.403Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序的编译过程&quot;&gt;&lt;a href=&quot;#程序的编译过程&quot; class=&quot;headerlink&quot; title=&quot;程序的编译过程&quot;&gt;&lt;/a&gt;程序的编译过程&lt;/h3&gt;&lt;h4 id=&quot;预处理（宏替换）&quot;&gt;&lt;a href=&quot;#预处理（宏替换）&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++中的引用和指针</title>
    <link href="http://xiazi97.github.io/2019/05/06/C-%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://xiazi97.github.io/2019/05/06/C-中的引用和指针/</id>
    <published>2019-05-06T12:17:08.000Z</published>
    <updated>2019-05-06T13:30:49.485Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引用的定义：&quot;&gt;&lt;a href=&quot;#引用的定义：&quot; class=&quot;headerlink&quot; title=&quot;引用的定义：&quot;&gt;&lt;/a&gt;引用的定义：&lt;/h3&gt;&lt;p&gt;C++是C语言的继承，它可以进行过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中四种cast转换</title>
    <link href="http://xiazi97.github.io/2019/05/05/C-%E4%B8%AD%E5%9B%9B%E7%A7%8Dcast%E8%BD%AC%E6%8D%A2/"/>
    <id>http://xiazi97.github.io/2019/05/05/C-中四种cast转换/</id>
    <published>2019-05-05T15:14:23.000Z</published>
    <updated>2019-05-05T15:15:35.241Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast&lt;/p&gt;
&lt;h3 id=&quot;const-cast&quot;&gt;&lt;a href=&quot;#const-cast&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>static关键字的作用</title>
    <link href="http://xiazi97.github.io/2019/05/04/static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/04/static关键字的作用/</id>
    <published>2019-05-04T15:00:23.000Z</published>
    <updated>2019-05-04T15:02:03.120Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;全局静态变量&quot;&gt;&lt;a href=&quot;#全局静态变量&quot; class=&quot;headerlink&quot; title=&quot;全局静态变量&quot;&gt;&lt;/a&gt;全局静态变量&lt;/h4&gt;&lt;p&gt;在全局变量前加上关键字static，全局变量就定义成一个全局静态变量.&lt;/p&gt;
&lt;p&gt;静态存储区，在整个程序
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>函数重载，重定义，重写</title>
    <link href="http://xiazi97.github.io/2019/05/03/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E9%87%8D%E5%AE%9A%E4%B9%89%EF%BC%8C%E9%87%8D%E5%86%99/"/>
    <id>http://xiazi97.github.io/2019/05/03/函数重载，重定义，重写/</id>
    <published>2019-05-03T06:59:48.000Z</published>
    <updated>2019-05-03T07:16:27.381Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数重载&quot;&gt;&lt;a href=&quot;#函数重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载&quot;&gt;&lt;/a&gt;函数重载&lt;/h3&gt;&lt;p&gt;在一个类中声明多个名称相同但是参数列表不同的函数，这些的参数可能个数或顺序，类型不同，但是不能靠返回类型来判断，也就是说，在
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://xiazi97.github.io/2019/04/28/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/28/红黑树/</id>
    <published>2019-04-28T00:49:44.000Z</published>
    <updated>2019-05-02T14:21:12.338Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红黑树，是一种二叉搜索树，但在每个结点增加一个存储位表示结点的颜色，可以是Red和Black，通过对任何一条从根到叶子结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出两倍，因而是接近平衡的。&lt;/p&gt;
&lt;h3 id=&quot;红黑树的性质&quot;&gt;&lt;a href=&quot;#红黑树的性质
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AVL树</title>
    <link href="http://xiazi97.github.io/2019/04/23/AVL%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/23/AVL树/</id>
    <published>2019-04-23T12:09:33.000Z</published>
    <updated>2019-04-24T15:17:22.283Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇所写的二叉搜索树虽可以缩短查找的效率，但如果数据有序或接近有序二叉搜索树将退化为单支树，查找元素相当于在顺序表中搜索元素，效率低下。因此，两位俄罗斯的数学家G.M.Adelson-Velskii和E.M.Landis在1962年发明了一种解决上述问题的方法：当向二叉搜
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://xiazi97.github.io/2019/04/20/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://xiazi97.github.io/2019/04/20/二叉搜索树/</id>
    <published>2019-04-20T12:57:43.000Z</published>
    <updated>2019-04-21T15:50:31.519Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;顾名思义，二叉搜索树是以一棵二叉树来组织的，这样的一棵树可以用一个链表结构来表示，每个节点除了data还有left、right、parent，分别指向节点的左孩子，右孩子和父节点。如果对应的节点不存在则指向NIL节点。（因为最简单的二叉搜索树中的NIL节点里并没有有用信息，
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>高级IO</title>
    <link href="http://xiazi97.github.io/2019/04/15/%E9%AB%98%E7%BA%A7IO/"/>
    <id>http://xiazi97.github.io/2019/04/15/高级IO/</id>
    <published>2019-04-15T15:36:10.000Z</published>
    <updated>2019-04-18T15:17:40.898Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进入IO之前，我们需要先明白一个概念，IO实际上是分两步的——1.等待，2.数据拷贝&lt;/p&gt;
&lt;p&gt;正式进入IO时，先来通过一个例子简单理解一下五种IO模型：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="linux" scheme="http://xiazi97.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="http://xiazi97.github.io/2019/03/25/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://xiazi97.github.io/2019/03/25/智能指针/</id>
    <published>2019-03-25T10:18:54.000Z</published>
    <updated>2019-04-11T15:28:48.711Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    C++程序设计中，使用堆内存是很繁琐的操作——堆内存的申请和释放都需要程序员自己去管理。虽然说程序员自己管理内存可以提高程序的效率，但是整体来说程序员手动管理内存是比较麻烦的，而且容易出现内存泄漏，异常安全（如果在malloc和free之间如果存在抛异常，那么还是
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DNS，ICMP协议及NAT技术</title>
    <link href="http://xiazi97.github.io/2019/03/07/DNS%EF%BC%8CICMP%E5%8D%8F%E8%AE%AE%E5%8F%8ANAT%E6%8A%80%E6%9C%AF/"/>
    <id>http://xiazi97.github.io/2019/03/07/DNS，ICMP协议及NAT技术/</id>
    <published>2019-03-07T02:59:30.000Z</published>
    <updated>2019-04-22T17:27:25.779Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DNS-Domain-Name-System&quot;&gt;&lt;a href=&quot;#DNS-Domain-Name-System&quot; class=&quot;headerlink&quot; title=&quot;DNS(Domain Name System)&quot;&gt;&lt;/a&gt;DNS(Domain Name Sys
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
