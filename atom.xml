<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snoopy</title>
  
  <subtitle>点个关注吧，亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiazi97.github.io/"/>
  <updated>2019-06-13T14:08:49.196Z</updated>
  <id>http://xiazi97.github.io/</id>
  
  <author>
    <name>李峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法</title>
    <link href="http://xiazi97.github.io/2019/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://xiazi97.github.io/2019/06/13/排序算法/</id>
    <published>2019-06-13T13:49:56.000Z</published>
    <updated>2019-06-13T14:08:49.196Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;对于一个带排序数组来说，其初始有序数组元素个数为1，然后从第二个元素，插入到有序数组中。对于每一次插入操作，从后往前遍历当前
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Top K问题</title>
    <link href="http://xiazi97.github.io/2019/06/12/Top-K%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/06/12/Top-K问题/</id>
    <published>2019-06-12T14:09:48.000Z</published>
    <updated>2019-06-12T14:17:08.656Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、直接全部排序（只适用于内存够的情况）&lt;/p&gt;
&lt;p&gt;当数据量较小的情况下，内存中可以容纳所有数据。则最简单也是最容易想到的方法是将数据全部排序，然后取排序后的数据中的前K个。&lt;/p&gt;
&lt;p&gt;这种方法对数据量比较敏感，&lt;strong&gt;当数据量较大的情况下，内存不能完全容纳
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="http://xiazi97.github.io/2019/06/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://xiazi97.github.io/2019/06/11/迭代器/</id>
    <published>2019-06-11T12:55:13.000Z</published>
    <updated>2019-06-11T15:07:51.644Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h3&gt;&lt;p&gt;Iterator（迭代器）模式又称Cursor（游标）模式，用于提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>非阻塞IO</title>
    <link href="http://xiazi97.github.io/2019/06/10/%E9%9D%9E%E9%98%BB%E5%A1%9EIO/"/>
    <id>http://xiazi97.github.io/2019/06/10/非阻塞IO/</id>
    <published>2019-06-10T06:29:30.000Z</published>
    <updated>2019-06-10T12:35:52.350Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我们知道，socket() 调用创建指定系列和指定类型的套接字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = socket(family, type, protocol);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket将返回套接字句柄。套接字句柄即为文件描述符s，而&lt;str
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>类中成员内存分布</title>
    <link href="http://xiazi97.github.io/2019/06/06/%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/"/>
    <id>http://xiazi97.github.io/2019/06/06/类中成员内存分布/</id>
    <published>2019-06-06T13:59:46.000Z</published>
    <updated>2019-06-06T14:05:24.149Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;static修饰符&quot;&gt;&lt;a href=&quot;#static修饰符&quot; class=&quot;headerlink&quot; title=&quot;static修饰符&quot;&gt;&lt;/a&gt;static修饰符&lt;/h3&gt;&lt;h4 id=&quot;static修饰成员变量&quot;&gt;&lt;a href=&quot;#static修饰成员变量&quot;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>程序内存管理</title>
    <link href="http://xiazi97.github.io/2019/06/05/%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://xiazi97.github.io/2019/06/05/程序内存管理/</id>
    <published>2019-06-05T14:08:04.000Z</published>
    <updated>2019-06-05T14:37:28.793Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序内存管理：&quot;&gt;&lt;a href=&quot;#程序内存管理：&quot; class=&quot;headerlink&quot; title=&quot;程序内存管理：&quot;&gt;&lt;/a&gt;程序内存管理：&lt;/h3&gt;&lt;p&gt;一个程序本质上都是由&lt;strong&gt;BSS段、data段、text段&lt;/strong&gt;三个组成的。可
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信</title>
    <link href="http://xiazi97.github.io/2019/06/04/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://xiazi97.github.io/2019/06/04/进程间通信/</id>
    <published>2019-06-04T14:39:38.000Z</published>
    <updated>2019-06-04T14:43:55.227Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进程间通信主要包括管道、系统IPC（包括消息队列、信号量、信号、共享内存等）、以及套接字socket。&lt;/p&gt;
&lt;h3 id=&quot;管道：&quot;&gt;&lt;a href=&quot;#管道：&quot; class=&quot;headerlink&quot; title=&quot;管道：&quot;&gt;&lt;/a&gt;管道：&lt;/h3&gt;&lt;p&gt;管道主要包括无
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>多态</title>
    <link href="http://xiazi97.github.io/2019/06/03/%E5%A4%9A%E6%80%81/"/>
    <id>http://xiazi97.github.io/2019/06/03/多态/</id>
    <published>2019-06-03T05:39:31.000Z</published>
    <updated>2019-06-03T15:18:04.234Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;多态的概念&quot;&gt;&lt;a href=&quot;#多态的概念&quot; class=&quot;headerlink&quot; title=&quot;多态的概念&quot;&gt;&lt;/a&gt;多态的概念&lt;/h3&gt;&lt;p&gt;通俗来说，就是多种形态，具体而言就是为了完成某一个行为，当不同的对象去完成时会产生不同的状态。&lt;/p&gt;
&lt;p&gt;举个栗
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="http://xiazi97.github.io/2019/06/02/%E7%BB%A7%E6%89%BF/"/>
    <id>http://xiazi97.github.io/2019/06/02/继承/</id>
    <published>2019-06-02T13:31:56.000Z</published>
    <updated>2019-06-02T14:10:26.151Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;继承的概念：&quot;&gt;&lt;a href=&quot;#继承的概念：&quot; class=&quot;headerlink&quot; title=&quot;继承的概念：&quot;&gt;&lt;/a&gt;继承的概念：&lt;/h3&gt;&lt;p&gt;继承(inheritance)机制是面向对象程序设计使代码可以复用的最重要的手段，它允许程序员在保持原有类特
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>覆盖与隐藏</title>
    <link href="http://xiazi97.github.io/2019/06/01/%E8%A6%86%E7%9B%96%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
    <id>http://xiazi97.github.io/2019/06/01/覆盖与隐藏/</id>
    <published>2019-06-01T14:24:03.000Z</published>
    <updated>2019-06-01T14:41:40.317Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/f29ec89
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>fork与vfork的区别</title>
    <link href="http://xiazi97.github.io/2019/05/31/fork%E4%B8%8Evfork%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiazi97.github.io/2019/05/31/fork与vfork的区别/</id>
    <published>2019-05-31T15:48:25.000Z</published>
    <updated>2019-05-31T15:49:45.214Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fork的基础知识：&quot;&gt;&lt;a href=&quot;#fork的基础知识：&quot; class=&quot;headerlink&quot; title=&quot;fork的基础知识：&quot;&gt;&lt;/a&gt;fork的基础知识：&lt;/h3&gt;&lt;p&gt;fork:创建一个和当前进程映像一样的进程可以通过fork( )系统调用：&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xiazi97.github.io/2019/05/30/C-11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://xiazi97.github.io/2019/05/30/C-11新特性/</id>
    <published>2019-05-30T14:17:52.522Z</published>
    <updated>2019-05-30T14:31:28.277Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可变参数模板：&quot;&gt;&lt;a href=&quot;#可变参数模板：&quot; class=&quot;headerlink&quot; title=&quot;可变参数模板：&quot;&gt;&lt;/a&gt;可变参数模板：&lt;/h3&gt;&lt;p&gt;C++11的可变参数模板，对参数进行了高度泛化，可以表示任意数目、任意类型的参数，其语法为：在cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP代理服务器的工作原理</title>
    <link href="http://xiazi97.github.io/2019/05/29/HTTP%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://xiazi97.github.io/2019/05/29/HTTP代理服务器的工作原理/</id>
    <published>2019-05-29T13:30:21.000Z</published>
    <updated>2019-05-29T14:34:30.356Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在HTTP通信链上，客户端和目标服务器之间通常存在某些中转代理服务器，它们提供对目标资源的中转访问。一个HTTP请求可能被多个代理服务器转发，后面的服务器称为前面服务器的上游服务器。代理服务器按照其使用方式和作用，分为&lt;strong&gt;正向代理服务器，反向代理服务器
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://xiazi97.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟地址空间</title>
    <link href="http://xiazi97.github.io/2019/05/28/Linux%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/"/>
    <id>http://xiazi97.github.io/2019/05/28/Linux虚拟地址空间/</id>
    <published>2019-05-28T15:02:47.000Z</published>
    <updated>2019-05-28T15:03:50.942Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么有虚拟地址空间&quot;&gt;&lt;a href=&quot;#为什么有虚拟地址空间&quot; class=&quot;headerlink&quot; title=&quot;为什么有虚拟地址空间&quot;&gt;&lt;/a&gt;为什么有虚拟地址空间&lt;/h3&gt;&lt;p&gt;为了防止不同进程同一时刻在物理内存中运行而对物理内存的争夺和践踏，采用了虚拟
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>STL的内存优化</title>
    <link href="http://xiazi97.github.io/2019/05/26/STL%E7%9A%84%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://xiazi97.github.io/2019/05/26/STL的内存优化/</id>
    <published>2019-05-26T14:39:49.000Z</published>
    <updated>2019-05-26T14:47:23.523Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1）二级配置器结构&quot;&gt;&lt;a href=&quot;#1）二级配置器结构&quot; class=&quot;headerlink&quot; title=&quot;1）二级配置器结构&quot;&gt;&lt;/a&gt;1）二级配置器结构&lt;/h3&gt;&lt;p&gt;STL内存管理使用二级内存配置器。&lt;/p&gt;
&lt;h4 id=&quot;1、第一级配置器&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>六一儿童节问题</title>
    <link href="http://xiazi97.github.io/2019/05/25/%E5%85%AD%E4%B8%80%E5%84%BF%E7%AB%A5%E8%8A%82%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/05/25/六一儿童节问题/</id>
    <published>2019-05-25T13:51:07.000Z</published>
    <updated>2019-05-25T13:55:33.111Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;六一儿童节，老师带了很多好吃的巧克力到幼儿园。每块巧克力j的重量为w[j]，对于每个小朋友i，当他分到的巧克力大小达到h[i
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>fork的使用</title>
    <link href="http://xiazi97.github.io/2019/05/24/fork%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiazi97.github.io/2019/05/24/fork的使用/</id>
    <published>2019-05-24T05:50:28.000Z</published>
    <updated>2019-05-24T07:13:41.775Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在牛客做题时遇到了这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int main(){fork()||fork();}共创建几个进程：&lt;strong&gt;_&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回想之前一直在这里跌倒从来没有爬起来过的经历，痛定
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>彩色的砖块</title>
    <link href="http://xiazi97.github.io/2019/05/23/%E5%BD%A9%E8%89%B2%E7%9A%84%E7%A0%96%E5%9D%97/"/>
    <id>http://xiazi97.github.io/2019/05/23/彩色的砖块/</id>
    <published>2019-05-23T14:14:20.000Z</published>
    <updated>2019-05-23T14:40:01.489Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;小易有一些彩色的砖块。每种颜色由一个大写字母表示。各个颜色砖块看起来都完全一样。现在有一个给定的字符串s,s中每个字符代表小
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>进程状态</title>
    <link href="http://xiazi97.github.io/2019/05/22/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://xiazi97.github.io/2019/05/22/进程状态/</id>
    <published>2019-05-22T02:46:29.000Z</published>
    <updated>2019-05-22T10:23:52.821Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，linux是一个多用户，多任务的系统，可以同时运行多个用户的多个程序，这样就必然会产生很多的进。而对于一个进程而言，它可以有如下几个状态&lt;/p&gt;
&lt;h3 id=&quot;常见进程状态：&quot;&gt;&lt;a href=&quot;#常见进程状态：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiazi97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>组队竞赛问题</title>
    <link href="http://xiazi97.github.io/2019/05/21/%E7%BB%84%E9%98%9F%E7%AB%9E%E8%B5%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://xiazi97.github.io/2019/05/21/组队竞赛问题/</id>
    <published>2019-05-21T12:24:29.000Z</published>
    <updated>2019-05-21T13:29:59.676Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,
      
    
    </summary>
    
    
      <category term="C++" scheme="http://xiazi97.github.io/tags/C/"/>
    
  </entry>
  
</feed>
